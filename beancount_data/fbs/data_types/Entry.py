# automatically generated by the FlatBuffers compiler, do not modify

# namespace: data_types

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Entry(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Entry()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEntry(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Entry
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Entry
    def Date(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Entry
    def Meta(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from beancount_data.fbs.data_types.MapItem import MapItem
            obj = MapItem()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Entry
    def MetaLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Entry
    def MetaIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # Entry
    def PayloadType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Entry
    def Payload(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def EntryStart(builder):
    builder.StartObject(4)

def Start(builder):
    EntryStart(builder)

def EntryAddDate(builder, date):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(date), 0)

def AddDate(builder, date):
    EntryAddDate(builder, date)

def EntryAddMeta(builder, meta):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(meta), 0)

def AddMeta(builder, meta):
    EntryAddMeta(builder, meta)

def EntryStartMetaVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMetaVector(builder, numElems: int) -> int:
    return EntryStartMetaVector(builder, numElems)

def EntryAddPayloadType(builder, payloadType):
    builder.PrependUint8Slot(2, payloadType, 0)

def AddPayloadType(builder, payloadType):
    EntryAddPayloadType(builder, payloadType)

def EntryAddPayload(builder, payload):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(payload), 0)

def AddPayload(builder, payload):
    EntryAddPayload(builder, payload)

def EntryEnd(builder):
    return builder.EndObject()

def End(builder):
    return EntryEnd(builder)
