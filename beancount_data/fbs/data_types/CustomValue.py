# automatically generated by the FlatBuffers compiler, do not modify

# namespace: data_types

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CustomValue(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CustomValue()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCustomValue(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CustomValue
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CustomValue
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # CustomValue
    def AmountValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from beancount_data.fbs.data_types.Amount import Amount
            obj = Amount()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CustomValue
    def DecimalValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CustomValue
    def StrValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CustomValue
    def BoolValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def CustomValueStart(builder):
    builder.StartObject(5)

def Start(builder):
    CustomValueStart(builder)

def CustomValueAddType(builder, type):
    builder.PrependInt8Slot(0, type, 0)

def AddType(builder, type):
    CustomValueAddType(builder, type)

def CustomValueAddAmountValue(builder, amountValue):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(amountValue), 0)

def AddAmountValue(builder, amountValue):
    CustomValueAddAmountValue(builder, amountValue)

def CustomValueAddDecimalValue(builder, decimalValue):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(decimalValue), 0)

def AddDecimalValue(builder, decimalValue):
    CustomValueAddDecimalValue(builder, decimalValue)

def CustomValueAddStrValue(builder, strValue):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(strValue), 0)

def AddStrValue(builder, strValue):
    CustomValueAddStrValue(builder, strValue)

def CustomValueAddBoolValue(builder, boolValue):
    builder.PrependBoolSlot(4, boolValue, 0)

def AddBoolValue(builder, boolValue):
    CustomValueAddBoolValue(builder, boolValue)

def CustomValueEnd(builder):
    return builder.EndObject()

def End(builder):
    return CustomValueEnd(builder)
