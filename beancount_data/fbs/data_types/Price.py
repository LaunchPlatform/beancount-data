# automatically generated by the FlatBuffers compiler, do not modify

# namespace: data_types

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Price(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Price()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPrice(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Price
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Price
    def Currency(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Price
    def Amount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def PriceStart(builder):
    builder.StartObject(2)

def Start(builder):
    PriceStart(builder)

def PriceAddCurrency(builder, currency):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(currency), 0)

def AddCurrency(builder, currency):
    PriceAddCurrency(builder, currency)

def PriceAddAmount(builder, amount):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(amount), 0)

def AddAmount(builder, amount):
    PriceAddAmount(builder, amount)

def PriceEnd(builder):
    return builder.EndObject()

def End(builder):
    return PriceEnd(builder)
