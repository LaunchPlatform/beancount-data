# automatically generated by the FlatBuffers compiler, do not modify

# namespace: data_types

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Balance(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Balance()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBalance(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Balance
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Balance
    def Account(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Balance
    def Amount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from beancount_data.fbs.data_types.Amount import Amount
            obj = Amount()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Balance
    def Tolerance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Balance
    def DiffAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from beancount_data.fbs.data_types.Amount import Amount
            obj = Amount()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def BalanceStart(builder):
    builder.StartObject(4)

def Start(builder):
    BalanceStart(builder)

def BalanceAddAccount(builder, account):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(account), 0)

def AddAccount(builder, account):
    BalanceAddAccount(builder, account)

def BalanceAddAmount(builder, amount):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(amount), 0)

def AddAmount(builder, amount):
    BalanceAddAmount(builder, amount)

def BalanceAddTolerance(builder, tolerance):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(tolerance), 0)

def AddTolerance(builder, tolerance):
    BalanceAddTolerance(builder, tolerance)

def BalanceAddDiffAmount(builder, diffAmount):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(diffAmount), 0)

def AddDiffAmount(builder, diffAmount):
    BalanceAddDiffAmount(builder, diffAmount)

def BalanceEnd(builder):
    return builder.EndObject()

def End(builder):
    return BalanceEnd(builder)
