# automatically generated by the FlatBuffers compiler, do not modify

# namespace: data_types

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Transaction(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Transaction()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTransaction(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Transaction
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Transaction
    def Flag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Transaction
    def Payee(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Transaction
    def Narration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Transaction
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Transaction
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Transaction
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # Transaction
    def Links(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Transaction
    def LinksLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Transaction
    def LinksIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # Transaction
    def Postings(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from beancount_data.fbs.data_types.Posting import Posting
            obj = Posting()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Transaction
    def PostingsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Transaction
    def PostingsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def TransactionStart(builder):
    builder.StartObject(6)

def Start(builder):
    TransactionStart(builder)

def TransactionAddFlag(builder, flag):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(flag), 0)

def AddFlag(builder, flag):
    TransactionAddFlag(builder, flag)

def TransactionAddPayee(builder, payee):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(payee), 0)

def AddPayee(builder, payee):
    TransactionAddPayee(builder, payee)

def TransactionAddNarration(builder, narration):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(narration), 0)

def AddNarration(builder, narration):
    TransactionAddNarration(builder, narration)

def TransactionAddTags(builder, tags):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)

def AddTags(builder, tags):
    TransactionAddTags(builder, tags)

def TransactionStartTagsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTagsVector(builder, numElems: int) -> int:
    return TransactionStartTagsVector(builder, numElems)

def TransactionAddLinks(builder, links):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(links), 0)

def AddLinks(builder, links):
    TransactionAddLinks(builder, links)

def TransactionStartLinksVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLinksVector(builder, numElems: int) -> int:
    return TransactionStartLinksVector(builder, numElems)

def TransactionAddPostings(builder, postings):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(postings), 0)

def AddPostings(builder, postings):
    TransactionAddPostings(builder, postings)

def TransactionStartPostingsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPostingsVector(builder, numElems: int) -> int:
    return TransactionStartPostingsVector(builder, numElems)

def TransactionEnd(builder):
    return builder.EndObject()

def End(builder):
    return TransactionEnd(builder)
