# automatically generated by the FlatBuffers compiler, do not modify

# namespace: data_types

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Cost(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Cost()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCost(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Cost
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Cost
    def Number(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Cost
    def Currency(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Cost
    def Date(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = o + self._tab.Pos
            from beancount_data.fbs.data_types.Date import Date
            obj = Date()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Cost
    def Label(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def CostStart(builder):
    builder.StartObject(4)

def Start(builder):
    CostStart(builder)

def CostAddNumber(builder, number):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(number), 0)

def AddNumber(builder, number):
    CostAddNumber(builder, number)

def CostAddCurrency(builder, currency):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(currency), 0)

def AddCurrency(builder, currency):
    CostAddCurrency(builder, currency)

def CostAddDate(builder, date):
    builder.PrependStructSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(date), 0)

def AddDate(builder, date):
    CostAddDate(builder, date)

def CostAddLabel(builder, label):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(label), 0)

def AddLabel(builder, label):
    CostAddLabel(builder, label)

def CostEnd(builder):
    return builder.EndObject()

def End(builder):
    return CostEnd(builder)
