# automatically generated by the FlatBuffers compiler, do not modify

# namespace: data_types

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Posting(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Posting()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPosting(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Posting
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Posting
    def Account(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Posting
    def Units(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from beancount_data.fbs.data_types.Amount import Amount
            obj = Amount()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Posting
    def CostType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Posting
    def Cost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # Posting
    def Price(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from beancount_data.fbs.data_types.Amount import Amount
            obj = Amount()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Posting
    def Flag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Posting
    def Meta(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from beancount_data.fbs.data_types.MapItem import MapItem
            obj = MapItem()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Posting
    def MetaLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Posting
    def MetaIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

def PostingStart(builder):
    builder.StartObject(7)

def Start(builder):
    PostingStart(builder)

def PostingAddAccount(builder, account):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(account), 0)

def AddAccount(builder, account):
    PostingAddAccount(builder, account)

def PostingAddUnits(builder, units):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(units), 0)

def AddUnits(builder, units):
    PostingAddUnits(builder, units)

def PostingAddCostType(builder, costType):
    builder.PrependUint8Slot(2, costType, 0)

def AddCostType(builder, costType):
    PostingAddCostType(builder, costType)

def PostingAddCost(builder, cost):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(cost), 0)

def AddCost(builder, cost):
    PostingAddCost(builder, cost)

def PostingAddPrice(builder, price):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(price), 0)

def AddPrice(builder, price):
    PostingAddPrice(builder, price)

def PostingAddFlag(builder, flag):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(flag), 0)

def AddFlag(builder, flag):
    PostingAddFlag(builder, flag)

def PostingAddMeta(builder, meta):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(meta), 0)

def AddMeta(builder, meta):
    PostingAddMeta(builder, meta)

def PostingStartMetaVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMetaVector(builder, numElems: int) -> int:
    return PostingStartMetaVector(builder, numElems)

def PostingEnd(builder):
    return builder.EndObject()

def End(builder):
    return PostingEnd(builder)
